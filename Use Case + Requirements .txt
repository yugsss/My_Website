🚀 How to Use

1. 🔍 Initial Scan — Save File Hashes
Run this to generate and store hashes for a directory:
python main.py update -d /path/to/watch

Example:
python main.py update -d configs/
Creates or updates database.json with the current hashes of all files in configs/.


2. 🧪 Check for Changes
Compare current file hashes against saved ones:
python main.py check -d /path/to/watch

Example:
python main.py check -d configs/

Output:
Added files:
configs/new_script.py

Deleted files:
configs/old_backup.conf

Modified files:
configs/nginx.conf


💡 Example Use Cases & Code

📁 Use Case 1: Monitor Server Config Files
Monitor /etc/nginx/ for tampering:
python main.py update -d /etc/nginx/
# Later...
python main.py check -d /etc/nginx/

⚙️ Use Case 2: Monitor Script Integrity for DevOps
Check if any scripts in your CI/CD tool were altered:
python main.py update -d ~/deploy/scripts/
# Later after builds
python main.py check -d ~/deploy/scripts/

🧬 Use Case 3: Compare System State Before & After Installers
Before running an unknown .sh script:
python main.py update -d ~/
bash install_something.sh
python main.py check -d ~/

📂 Sample Output of database.json
{
  "/home/user/configs/nginx.conf": "5f342a8ef9fda7c3e48aa928bc7dd8f5b3472...",
  "/home/user/configs/app.env": "2e1b3e0ddf7c4a2c2bd8f8c2c2767ab6acb4d..."
}





✅ Requirements
Python 3.6+
No external libraries required (uses hashlib, os, json)
Install dependencies (if any added later):



